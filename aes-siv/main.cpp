#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "AES.h"
#include "aes256-cmac.h"
#include "aes256-ctr.h"
#include "aes256-siv.h"

#define DUMP(s, i, buf, sz)  {printf(s);                   \
                              for (i = 0; i < (sz); i++)    \
                                  printf("%02x ", buf[i]); \
                              printf("\n");}

int main(int argc, char *argv[])
{
	/*
	aes256_context ctx;
	uint8_t key[32];
	uint8_t buf[16], i;

	// put a test vector
	for (i = 0; i < sizeof(buf); i++) buf[i] = i * 16 + i;
	for (i = 0; i < sizeof(key); i++) key[i] = i;

	DUMP("txt: ", i, buf, sizeof(buf));
	DUMP("key: ", i, key, sizeof(key));
	printf("---\n");

	aes256_init(&ctx, key);
	aes256_encrypt_ecb(&ctx, buf);

	DUMP("enc: ", i, buf, sizeof(buf));
	printf("tst: 8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89\n");

	//aes256_init(&ctx, key);
	aes256_decrypt_ecb(&ctx, buf);
	DUMP("dec: ", i, buf, sizeof(buf));

	aes256_done(&ctx);
	*/

	AES ctx;
	uint8_t i;
	int result;

	// The following AES-256 CMAC tests come from:
	// http://csrc.nist.gov/publications/nistpubs/800-38B/SP_800-38B.pdf

	uint8_t cmac_key[32] = {
		0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
		0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
		0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
		0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
	};
	uint8_t example9mac[16] = {
		0x02, 0x89, 0x62, 0xf6, 0x1b, 0x7b, 0xf8, 0x9e,
		0xfc, 0x6b, 0x55, 0x1f, 0x46, 0x67, 0xd9, 0x83
	};
	uint8_t example10[16] = {
		0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
		0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
	};
	uint8_t example10mac[16] = {
		0x28, 0xa7, 0x02, 0x3f, 0x45, 0x2e, 0x8f, 0x82,
		0xbd, 0x4b, 0xf2, 0x8d, 0x8c, 0x37, 0xc3, 0x5c
	};
	uint8_t example11[40] = {
		0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
		0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
		0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
		0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
		0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11
	};
	uint8_t example11mac[16] = {
		0xaa, 0xf3, 0xd8, 0xf1, 0xde, 0x56, 0x40, 0xc2,
		0x32, 0xf5, 0xb1, 0x69, 0xb9, 0xc9, 0x11, 0xe6
	};
	uint8_t example12[64] = {
		0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
		0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
		0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
		0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
		0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
		0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
		0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
		0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
	};
	uint8_t example12mac[16] = {
		0xe1, 0x99, 0x21, 0x90, 0x54, 0x9f, 0x6e, 0xd5,
		0x69, 0x6a, 0x2c, 0x05, 0x6c, 0x31, 0x54, 0x10
	};
	uint8_t mac[16];
	ctx.set_key(cmac_key, 32);

	aes256_cmac(&ctx, NULL, 0, mac);
	DUMP("ex09: ", i, mac, sizeof(mac));
	result = memcmp(mac, example9mac, sizeof(mac));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");

	aes256_cmac(&ctx, example10, sizeof(example10), mac);
	DUMP("ex10: ", i, mac, sizeof(mac));
	result = memcmp(mac, example10mac, sizeof(mac));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");

	aes256_cmac(&ctx, example11, sizeof(example11), mac);
	DUMP("ex11: ", i, mac, sizeof(mac));
	result = memcmp(mac, example11mac, sizeof(mac));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");

	aes256_cmac(&ctx, example12, sizeof(example12), mac);
	DUMP("ex12: ", i, mac, sizeof(mac));
	result = memcmp(mac, example12mac, sizeof(mac));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");

	/////////////////////////////////////////////////////////////////////////

	// The following AES-256 CTR tests come from:
	// http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf

	uint8_t ctr_key[32] = {
		0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
		0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
		0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
		0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
	};
	uint8_t ctr_iv[16] = {
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
		0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
	};
	const uint8_t ctr_input1[64] = {
		0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
		0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
		0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
		0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
		0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
		0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
		0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
		0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
	};
	const uint8_t ctr_output1[64] = {
		0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5,
		0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28,
		0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a,
		0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5,
		0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c,
		0xe8, 0x70, 0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d,
		0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6,
		0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6
	};

	ctx.set_key(ctr_key, 32);
	uint8_t buf[64];

	memcpy(buf, ctr_input1, sizeof(buf));
	aes256_ctr(&ctx, buf, sizeof(buf), ctr_iv);
	DUMP("ctr1: ", i, buf, sizeof(buf));
	result = memcmp(buf, ctr_output1, sizeof(buf));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");

	memcpy(buf, ctr_output1, sizeof(buf));
	aes256_ctr(&ctx, buf, sizeof(buf), ctr_iv);
	DUMP("ctr2: ", i, buf, sizeof(buf));
	result = memcmp(buf, ctr_input1, sizeof(buf));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");

	/////////////////////////////////////////////////////////////////////////

	// The following AES-256 SIV tests come from:
	// http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/siv/siv-test-vectors.txt

	uint8_t siv1_key[64] = {
		0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,
		0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
		0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68,
		0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
		0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};
	uint8_t siv1_h1[24] = {
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27
	};
	uint8_t siv1_plaintext[14] = {
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
		0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee
	};
	uint8_t siv1_iv[16] = {
		0xf1, 0x25, 0x27, 0x4c, 0x59, 0x80, 0x65, 0xcf,
		0xc2, 0x6b, 0x0e, 0x71, 0x57, 0x50, 0x29, 0x08
	};
	uint8_t siv1_ciphertext[14] = {
		0x8b, 0x03, 0x52, 0x17, 0xe3, 0x80, 0xca, 0xc8,
		0x91, 0x9e, 0xe8, 0x00, 0xc1, 0x26
	};
	uint8_t siv2_key[64] = {
		0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78,
		0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70,
		0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68,
		0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
		0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
		0x58, 0x59, 0x5a, 0x5b, 0x5b, 0x5d, 0x5e, 0x5f
	};
	uint8_t siv2_h1[40] = {
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
		0xde, 0xad, 0xda, 0xda, 0xde, 0xad, 0xda, 0xda,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00
	};
	uint8_t siv2_h2[10] = {
		0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80,
		0x90, 0xa0
	};
	uint8_t siv2_h3[16] = {
		0x09, 0xf9, 0x11, 0x02, 0x9d, 0x74, 0xe3, 0x5b,
		0xd8, 0x41, 0x56, 0xc5, 0x63, 0x56, 0x88, 0xc0
	};
	uint8_t siv2_plaintext[47] = {
		0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,
		0x73, 0x6f, 0x6d, 0x65, 0x20, 0x70, 0x6c, 0x61,
		0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x74,
		0x6f, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
		0x74, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20,
		0x53, 0x49, 0x56, 0x2d, 0x41, 0x45, 0x53
	};
	uint8_t siv2_iv[16] = {
		0x85, 0xb8, 0x16, 0x73, 0x10, 0x03, 0x8d, 0xb7,
		0xdc, 0x46, 0x92, 0xc0, 0x28, 0x1c, 0xa3, 0x58
	};
	uint8_t siv2_ciphertext[47] = {
		0x68, 0x18, 0x1b, 0x27, 0x62, 0xf3, 0xc2, 0x4f,
		0x2e, 0xfa, 0x5f, 0xb8, 0x0c, 0xb1, 0x43, 0x51,
		0x6c, 0xe6, 0xc4, 0x34, 0xb8, 0x98, 0xa6, 0xfd,
		0x8e, 0xb9, 0x8a, 0x41, 0x88, 0x42, 0xf5, 0x1f,
		0x66, 0xfc, 0x67, 0xde, 0x43, 0xac, 0x18, 0x5a,
		0x66, 0xdd, 0x72, 0x47, 0x5b, 0xbb, 0x08
	};

	bool ret;

	uint8_t siv_out[16];

	uint8_t siv1_buf[14];
	memcpy(siv1_buf, siv1_plaintext, sizeof(siv1_buf));
	size_t siv1_header_sizes[1] = { sizeof(siv1_h1) };
	aes256_encrypt_siv(siv1_key, siv1_h1, siv1_header_sizes, sizeof(siv1_header_sizes) / sizeof(size_t), siv1_buf, sizeof(siv1_buf), siv_out);
	DUMP("siv1 ciphertext: ", i, siv1_buf, sizeof(siv1_buf));
	result = memcmp(siv1_buf, siv1_ciphertext, sizeof(siv1_buf));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");
	DUMP("siv1 iv: ", i, siv_out, sizeof(siv_out));
	result = memcmp(siv_out, siv1_iv, sizeof(siv_out));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");

	memcpy(siv1_buf, siv1_ciphertext, sizeof(siv1_buf));
	ret = aes256_decrypt_siv(siv1_key, siv1_h1, siv1_header_sizes, sizeof(siv1_header_sizes) / sizeof(size_t), siv1_buf, sizeof(siv1_buf), siv1_iv);
	DUMP("siv1 decrypted: ", i, siv1_buf, sizeof(siv1_buf));
	result = memcmp(siv1_buf, siv1_plaintext, sizeof(siv1_buf));
	printf(result == 0 ? "Success (cmp)\n" : "*****Failure (cmp)\n");
	printf(ret ? "Success\n\n" : "*****Failure\n\n");

	uint8_t siv2_hx[66] = {
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
		0xde, 0xad, 0xda, 0xda, 0xde, 0xad, 0xda, 0xda,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00,
		0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80,
		0x90, 0xa0, 0x09, 0xf9, 0x11, 0x02, 0x9d, 0x74,
		0xe3, 0x5b, 0xd8, 0x41, 0x56, 0xc5, 0x63, 0x56,
		0x88, 0xc0
	};

	uint8_t siv2_buf[47];
	memcpy(siv2_buf, siv2_plaintext, sizeof(siv2_buf));
	size_t siv2_header_sizes[3] = { sizeof(siv2_h1), sizeof(siv2_h2), sizeof(siv2_h3) };

	aes256_encrypt_siv(siv2_key, siv2_hx, siv2_header_sizes, sizeof(siv2_header_sizes) / sizeof(size_t), siv2_buf, sizeof(siv2_buf), siv_out);
	DUMP("siv2 ciphertext: ", i, siv2_buf, sizeof(siv2_buf));
	result = memcmp(siv2_buf, siv2_ciphertext, sizeof(siv2_buf));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");
	DUMP("siv2 iv: ", i, siv_out, sizeof(siv_out));
	result = memcmp(siv_out, siv2_iv, sizeof(siv_out));
	printf(result == 0 ? "Success\n\n" : "*****Failure\n\n");

	memcpy(siv2_buf, siv2_ciphertext, sizeof(siv2_buf));
	ret = aes256_decrypt_siv(siv2_key, siv2_hx, siv2_header_sizes, sizeof(siv2_header_sizes) / sizeof(size_t), siv2_buf, sizeof(siv2_buf), siv2_iv);
	DUMP("siv2 decrypted: ", i, siv2_buf, sizeof(siv2_buf));
	result = memcmp(siv2_buf, siv2_plaintext, sizeof(siv2_buf));
	printf(result == 0 ? "Success (cmp)\n" : "*****Failure (cmp)\n");
	printf(ret ? "Success\n\n" : "*****Failure\n\n");

	char in[2];
	fgets(in, 2, stdin);
	return 0;
}

